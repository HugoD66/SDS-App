security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Admin:
            algorithm: auto
        App\Entity\Partenaire:
            algorithm: auto
        App\Entity\Structure:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    providers:
        app_user_provider:
            entity: { class: App\Entity\Admin, property: email }
        app_partenaire_provider:
            entity:
                class: App\Entity\Partenaire
                property: email
        app_structure_provider:
            entity:
                class: App\Entity\Structure
                property: email

        providers:
            chain:
                providers: ['app_user_provider', 'app_partenaire_provider', 'app_structure_provider']

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false


        partenaire:
            lazy: true
            pattern: ^/login-partenaire
            provider: app_partenaire_provider
            custom_authenticator: App\Security\LoginPartenaireAuthenticator
            user_checker: App\Security\UserChecker
            logout:
                target: app_home

        structure:
            lazy: true
            pattern: ^/login-structure
            provider: app_structure_provider
            custom_authenticator: App\Security\LoginStructureAuthenticator
            user_checker: App\Security\UserCheckerStructure
            logout:
                target: app_home


        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
            logout:
                path: app_logout
                target: app_home
            entry_point: form_login
            access_denied_handler: App\Security\AccessDeniedHandler
            login_throttling:
                max_attempts: 20
                interval: '15 minutes'

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_STRUCTURE:    ROLE_USER
        ROLE_PARTENAIRE:    ROLE_STRUCTURE
        ROLE_ADMIN:    ROLE_PARTENAIRE
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/register, roles: ROLE_ADMIN }
        - { path: ^/add_partenaire, roles: ROLE_ADMIN }
        - { path: ^/add_permission, roles: ROLE_ADMIN }
        - { path: ^/add-structure, roles: ROLE_ADMIN }
        - { path: ^/change-password, roles: ROLE_ADMIN }
        - { path: ^/permission-globale, roles: ROLE_ADMIN }
        - { path: ^/profil, roles: ROLE_ADMIN }
        - { path: ^/login-partenaire/ , roles: ROLE_STRUCTURE }
        - { path: ^/permission, roles: ROLE_STRUCTURE }
        - { path: ^/permissions, roles: ROLE_STRUCTURE }
        - { path: ^/structure, roles: ROLE_STRUCTURE }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
